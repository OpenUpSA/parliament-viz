---
import Layout from "../layouts/Layout.astro";
import "../style/main.scss";
import fs from "fs";
import { parse } from "csv-parse";

const fileData = fs.readFileSync("./src/data/utterances-by-party.csv", "utf8");
const data = await new Promise((resolve, reject) => {
  parse(
    fileData,
    {
      columns: false,
      skip_empty_lines: true,
      cast: true,
      from_line: 2,
    },
    (err, output) => {
      if (err) {
        reject(err);
      } else {
        resolve(output);
      }
    }
  );
});

// Group data array into object by second column
const groupedData = {};
data.forEach((row) => {
  if (!groupedData[row[1]]) {
    groupedData[row[1]] = {};
  }
  groupedData[row[1]][row[0]] = {
    full_name: row[0],
    party: row[1],
    utterance_count: row[2],
    pa_url: row[3],
    profile_pic_url: row[4],
  };
});

// Array from data sorted by party with most keys and then utterance count
const utterances = Object.keys(groupedData)
  .sort((a, b) => {
    return (
      Object.keys(groupedData[b]).length - Object.keys(groupedData[a]).length
    );
  })
  .reduce((obj, key) => {
    obj[key] = groupedData[key];
    return obj;
  }, {});

// Find max utterance count
const maxUtteranceCount = Object.keys(utterances).reduce((max, party_key) => {
  const partyMax = Object.keys(utterances[party_key]).reduce(
    (max, member_key) => {
      return Math.max(
        max,
        parseInt(utterances[party_key][member_key]["utterance_count"])
      );
    },
    0
  );
  return Math.max(max, partyMax);
}, 0);

const partyColourOpacity = 0.2;
const partyColoursRGB = {
  ANC: `255, 203, 3`,
  DA: `0, 92, 167`,
  EFF: `217, 0, 0`,
  IFP: `255, 155, 155`,
  ACDP: `155, 155, 155`,
  NFP: `0, 255, 255`,
  UDM: `155, 255, 155`,
  COPE: `255, 0, 255`,
  "FF+": `0, 255, 0`,
  "AGANG SA": `255, 155, 0`,
  AIC: `255, 155, 255`,
  APC: `155, 255, 255`,
  "Al Jama-ah": `255, 255, 155`,
  ATM: `255, 255, 155`,
  GOOD: `155, 255, 255`,
  PAC: `255, 155, 255`,
  "Minority Front (MF)": `255, 255, 155`,
};

const partyColourRGBA = (rgb: string) => {
  return `rgba(${rgb}, ${partyColourOpacity})`;
};

// Function to scale utterance count between 1 and 50
const calcVH = (utteranceCount: number) => {
  const x = 4 + ((utteranceCount - 1) / (maxUtteranceCount - 1)) * (30 - 2);
  return Math.round(x * 100) / 100;
};
---

<Layout title="Voices of the 6th Parliament">
  {
    Object.keys(utterances).map((party_key) => (
      <div class="item">
        <h2>{party_key}</h2>
        <ul>
          {Object.keys(utterances[party_key])
            .sort((a, b) => {
              return (
                utterances[party_key][b]["utterance_count"] -
                utterances[party_key][a]["utterance_count"]
              );
            })
            .map((member_key) => {
              let member = utterances[party_key][member_key];
              return (
                <li
                  title={`${member["full_name"]} (${member["party"]}): ${member["utterance_count"]} utterances`}
                >
                  <div
                    class="party-circle"
                    style={{
                      width: calcVH(member["utterance_count"]) + "vh",
                      height: calcVH(member["utterance_count"]) + "vh",
                      lineHeight: calcVH(member["utterance_count"]) + "vh",
                      backgroundColor: partyColourRGBA(
                        partyColoursRGB[party_key]
                      ),
                    }}
                  />
                  <a
                    href={member["pa_url"]}
                    target="_blank"
                    class={`avatar utterances-${member["utterance_count"]}`}
                    style={{
                      backgroundImage: `url(${member["profile_pic_url"]})`,
                    }}
                  >
                    {member["full_name"]} ({member["party"]}):{" "}
                    {member["utterance_count"]} utterances
                  </a>
                </li>
              );
            })}
        </ul>
      </div>
    ))
  }
</Layout>
